#!/bin/bash
#
# Copyright (c) 2020 NVI, Inc.
#
# This file is part of VLBI Field System
# (see http://github.com/nvi-inc/fs).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

VERSION=UNKNOWN-VERSION

version(){
    echo "fesh $VERSION"
}

#enable 'strict' mode
set -euo pipefail

FS_BASE=${FS_BASE:-'/usr2'}
FS_PATH=${FS_PATH:-"${FS_BASE}/fs"}
CONTROL_PATH=${CONTROL_PATH:-"${FS_BASE}/control"}
LOG_PATH=${LOG_PATH:-"${FS_BASE}/log"}
# check for skedf.ctl
if [[ -e $CONTROL_PATH/skedf.ctl ]]; then
    proc_path=$( perl -ne 'END {if(eof) {$_=".";} print;} if(/^\$proc/i     ) {while (<>){if(/^\$/) {$_=".";exit;} elsif(/^[ \t]*$/) {}elsif(/^[ \t]*([^* \t].*?)\/* *$/) {$_=$1;exit;}}}' <$CONTROL_PATH/skedf.ctl)
    snap_path=$( perl -ne 'END {if(eof) {$_=".";} print;} if(/^\$snap/i     ) {while (<>){if(/^\$/) {$_=".";exit;} elsif(/^[ \t]*$/) {}elsif(/^[ \t]*([^* \t].*?)\/* *$/) {$_=$1;exit;}}}' <$CONTROL_PATH/skedf.ctl)
    sched_path=$(perl -ne 'END {if(eof) {$_=".";} print;} if(/^\$schedules/i) {while (<>){if(/^\$/) {$_=".";exit;} elsif(/^[ \t]*$/) {}elsif(/^[ \t]*([^* \t].*?)\/* *$/) {$_=$1;exit;}}}' <$CONTROL_PATH/skedf.ctl)
    PROC_PATH=${PROC_PATH:-"${proc_path}"}
    SNAP_PATH=${SNAP_PATH:-"${snap_path}"}
    SCHED_PATH=${SCHED_PATH:-"${sched_path}"}
else
# drudg won't run without skedf.ctl, maybe some day it will
# we can still get the schedule
# use current directory without other information
    SCHED_PATH=${SCHED_PATH:-"."}
fi

FESH_DATA_CENTER=${FESH_DATA_CENTER:-'cddis'}

usage() {
    cat <<EOF
Usage: $0 [options] OBSERVATION [DATA_CENTER]
Fetch schedule file for OBSERVATION from DATA_CENTER.

DATA_CENTER is optional, defaults to cddis. Other
accepted values are bkg and opar.

Options:
    -n     Fetch next observation in master schedule
    -d     DRUDG schedule with default settings 
           (needs STATION environment variable set to two letter id)
    -v     Verbose mode, drudg output printed to stdout
    -V     Print version and exit.
    -f     Force downloading of schedule from server and, if given 
           with '-d', re-run drudg
    -h     Print this message

fesh requires the STATION environment variable be set to the lower case
two-letter station code in, e.g.:

    setenv STATION gs #in ~/.login for tcsh or
    export STATION=gs #in ~/.profile for bash

The default data center can be changed by setting it in the
FESH_DATA_CENTER environment variable. Accepted values are bkg,
cddis, and opar. For example, to make the default bkg, use:

    setenv FESH_DATA_CENTER bkg #in ~/.login for tcsh or
    export FESH_DATA_CENTER=bkg #in ~/.profile for bash

fesh (curl actually) will prompt for an email to use as the password
for anonymous ftp-ssl access for cddis. This can be suppressed by
setting a working email address in the FESH_EMAIL variable, e.g.:

    setenv FESH_EMAIL user2@address #in ~/.login for tcsh or
    export FESH_EMAIL=user2@address #in ~/.profile for bash

The directories for .skd, .snp, and .prc files are obtained from
the skedf.ctl control file. The listing files go with the .skd files.

If you have FSL8 or other old distribution that does not support
curl ftp-ssl to CDDIS, but worked with the previous versions of
fesh that used wget for non-ssl ftp, you can restore the previous
behaviour with:

    setenv FESH_CDDIS_NOSSL 1 #in ~/.login for tcsh or
    export FESH_CDDIS_NOSSL=1 #in ~/.profile for bash

However, this method will no longer work when CDDIS stops support
of non-ssl ftp, which is expected at the end of October 2020.
EOF
}

run_drudg=
force=
verbose=
while getopts 'ndhfvV' opt; do
    case $opt in
        n)
            echo "next" not implimented.
            exit 1
            ;;
        d)
            if [[ ! -e $CONTROL_PATH/skedf.ctl ]]; then
                echo "$CONTROL_PATH/skedf.ctl doesn't exist, can't run drudg, don't use '-d'" >&2
                exit 1
            fi
            run_drudg=1
            ;;
        f)
            force=1
            ;;
        h)
            usage
            exit 0
            ;;
        v)
            verbose=1
            ;;
        V)
            version
            exit 0
            ;;
        *)
            usage >&2
            exit 1
    esac
done
shift $((OPTIND - 1))

if [[ $# -eq 0 ]] ; then
    usage >&2
    exit 1
fi

sched=$1

if [[ ! -z "${2:-}" ]]; then
    FESH_DATA_CENTER=$2
fi

if [[ ! "$FESH_DATA_CENTER" =~ ^(cddis|opar|bkg) ]]; then
   echo "Unknown data center: $FESH_DATA_CENTER."
   exit 1
fi

## Conflict check
if [[ -e $SCHED_PATH/$sched.skd && -z "$force" ]]; then
    echo "$SCHED_PATH/$sched.skd exists, delete or use '-f' to get fresh schedule" >&2
    exit 1
fi

if [[ -n "$run_drudg" ]]; then
    set +u
    if [[ -z "$STATION" ]]; then
        >&2 echo "$0: ERROR: STATION enviroment variable not set; should be set to two-letter station code if using drudg."
        exit 1
    fi
    set -u
    if [[ -e $SNAP_PATH/$sched$STATION.snp ]]; then
        if [[ -z "$force" ]]; then
            echo "$SNAP_PATH/$sched$STATION.snp exists, delete or use '-f' to re-drudg" >&2
            exit 1
        fi
        rm "$SNAP_PATH/$sched$STATION.snp"
    fi
    if [[ -e $PROC_PATH/$sched$STATION.prc ]]; then
        if [[ -z "$force" ]]; then
            echo "$PROC_PATH/$sched$STATION.prc exists, delete or use '-f' to re-drudg" >&2
            exit 1
        fi
        rm "$PROC_PATH/$sched$STATION.prc"
    fi
fi
 
if [[ -z "${FESH_EMAIL:-}" ]]; then
    user=anonymous
else
    user="anonymous:$FESH_EMAIL"
fi
year=$(date +%Y)
cd "$SCHED_PATH"
version
echo Fetching schedule from server...
#TODO: if not found, maybe check next or previous years?
if [[ "$FESH_DATA_CENTER" =~ cddis ]]; then
    if [[ -z "${FESH_CDDIS_NOSSL:-}" ]]; then
        curl -u "$user" -O --ftp-ssl "ftp://gdc.cddis.eosdis.nasa.gov/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
    else
        wget -nv --backups=1 "ftp://cddis.gsfc.nasa.gov/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
    fi
elif [[ "$FESH_DATA_CENTER" =~ opar ]]; then
wget -nv --backups=1 "ftp://ivsopar.obspm.fr/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
elif [[ "$FESH_DATA_CENTER" =~ bkg ]]; then
wget -nv --backups=1 "ftp://ivs.bkg.bund.de/pub/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
fi
echo Done

drudg_out="/dev/null"
if [[ -n "$verbose" ]]; then
    drudg_out="/dev/stdout"
fi

if [[ -n "$run_drudg" ]]; then
echo -n Drudging schedule... >&2
cat <<EOF | "$FS_PATH/bin/drudg" "$sched.skd" > "$drudg_out"
$STATION
3
12
9
$sched$STATION.lst



5
0

EOF

echo Done. >&2
fi
