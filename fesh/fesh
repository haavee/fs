#!/bin/bash
#
# Copyright (c) 2020 NVI, Inc.
#
# This file is part of VLBI Field System
# (see http://github.com/nvi-inc/fs).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

VERSION=UNKNOWN-VERSION

version(){
    echo "fesh $VERSION"
}

#enable 'strict' mode
set -euo pipefail

FS_BASE=${FS_BASE:-'/usr2'}
FS_DIR=${FS_DIR:-"${FS_BASE}/fs"}
CONTROL_DIR=${CONTROL_DIR:-"${FS_BASE}/control"}
LOG_DIR=${LOG_DIR:-"${FS_BASE}/log"}
# check for skedf.ctl
if [[ -e $CONTROL_DIR/skedf.ctl ]]; then
    proc_dir=$( perl -ne 'END {if(eof) {$_=".";} print;} if(/^\$proc/i     ) {while (<>){if(/^\$/) {$_=".";exit;} elsif(/^[ \t]*([^* \t\n].*?)\/*[ \t]*$/) {$_=$1;exit;}}}' <$CONTROL_DIR/skedf.ctl)
    snap_dir=$( perl -ne 'END {if(eof) {$_=".";} print;} if(/^\$snap/i     ) {while (<>){if(/^\$/) {$_=".";exit;} elsif(/^[ \t]*([^* \t\n].*?)\/*[ \t]*$/) {$_=$1;exit;}}}' <$CONTROL_DIR/skedf.ctl)
    sched_dir=$(perl -ne 'END {if(eof) {$_=".";} print;} if(/^\$schedules/i) {while (<>){if(/^\$/) {$_=".";exit;} elsif(/^[ \t]*([^* \t\n].*?)\/*[ \t]*$/) {$_=$1;exit;}}}' <$CONTROL_DIR/skedf.ctl)
    PROC_DIR=${PROC_DIR:-"${proc_dir}"}
    SNAP_DIR=${SNAP_DIR:-"${snap_dir}"}
    SCHED_DIR=${SCHED_DIR:-"${sched_dir}"}
#do not use the above the three *_DIR environment variables
#to override what is in skedf.ctl; they can be used to override
#what is placed in the corresponding *_dir variables if the
#perl directory extracts get the wrong result
    LIST_DIR=${LIST_DIR:-${SCHED_DIR}}
else
# drudg won't run without skedf.ctl, maybe some day it will
# we can still get the schedule
# use current directory without other information
    SCHED_DIR=${SCHED_DIR:-"."}
fi

FESH_DATA_CENTER=${FESH_DATA_CENTER:-'cddis'}

FESH_CDDIS_METHOD=${FESH_CDDIS_METHOD:-'ftp-ssl'}

if [[ -z "${NETRC_DIR:-}" ]]; then
    NETRC_DIR=$HOME
    CURL_NETRC_FILE_OPTION=
else
    CURL_NETRC_FILE_OPTION=" --netrc-file $NETRC_DIR/.netrc"
fi

fatal(){
    echo -e "ERROR: fesh:" "$*" >&2
    exit 1
}

year=$(date +%Y)

usage() {
    cat <<EOF
+Usage: $0 [options] OBSERVATION
+Fetch schedule file for OBSERVATION

Options:
    -n      Fetch next observation in master schedule
    -d      DRUDG schedule with default settings
            (needs STATION environment variable set to two letter id)
    -D dc   Use alternate data center; dc=bkg, cddis, or opar
            (see more below about setting the default data center)
    -v      Verbose mode, drudg output printed to stdout
    -V      Print version and exit.
    -y yyyy Specify different (four-digit) year than the current one
            (see more below about specifying the year)
    -f      Force downloading of schedule from server and, if given
            with '-d', re-run drudg
    -h      Print this message

For the '-d' option, the STATION environment variable must be set to
the lower case two-letter station code in, e.g.:

    setenv STATION gs #in ~/.login for tcsh or
    export STATION=gs #in ~/.profile for bash

By default fesh gets an observation for the current year, but this can
be overridden with '-y' option. That option can be used to get a
schedule for the next year.

The default data center is CDDIS but can be changed by setting the
FESH_DATA_CENTER environment variable. Accepted values are bkg, cddis,
and opar. For example, to make the default bkg, use:

    setenv FESH_DATA_CENTER bkg #in ~/.login for tcsh or
    export FESH_DATA_CENTER=bkg #in ~/.profile for bash

The '-D' option can be used to specify an alternate data center when
running the script.

fesh (curl actually) will prompt for an email to use as the password
for anonymous ftp-ssl access for CDDIS. This can be suppressed by
setting a working email address in the FESH_EMAIL variable, e.g.:

    setenv FESH_EMAIL user@address #in ~/.login for tcsh or
    export FESH_EMAIL=user@address #in ~/.profile for bash

The directories for .skd, .snp, and .prc files are obtained from
the skedf.ctl control file. The listing files go with the .skd files
by default, but can be over-ridden with the LIST_DIR environment
variable. For example to make it the current directory, use:

    setenv LIST_DIR . #in ~/.login for tcsh or
    export LIST_DIR=. #in ~/.profile for bash

The default transfer method from CDDIS is ftp-ssl.  You can use https
as the method with CDDIS if you set:

    setenv FESH_CDDIS_METHOD https #in ~/.login for tcsh or
    export FESH_CDDIS_METHOD=https #in ~/.profile for bash

For the CDDIS https method, the login must be configured in ".netrc"
which by default is in "~".  For example:

    machine urs.earthdata.nasa.gov
        login mycddisuser
        password secret

If your curl supports the "--netrc-file" option (see "man curl") , you
can change the directory used for ".netrc" by setting the NETRC_DIR
environment variable.  The matches plog. E.g., add the following to
your login script

    setenv NETRC_DIR "/usr2/control" #in ~/.login for tcsh or
    export NETRC_DIR="/usr2/control" #in ~/.profile for bash

See "man 5 netrc" for more details on ".netrc".

If you have FSL8 or another old distribution that does not support
curl ftp-ssl or https with CDDIS, but worked with the previous
versions of fesh that used wget for non-ssl ftp, you can restore the
previous behaviour with:

    setenv FESH_CDDIS_METHOD ftp #in ~/.login for tcsh or
    export FESH_CDDIS_METHOD=ftp #in ~/.profile for bash

However, this method will no longer work when CDDIS stops support
of non-ssl ftp, which is expected at the end of October 2020.
EOF
}

run_drudg=
force=
verbose=
while getopts 'ndD:hfvVy:' opt; do
    case $opt in
        n)
            echo "next" not implimented.
            exit 1
            ;;
        d)
            if [[ ! -e $CONTROL_DIR/skedf.ctl ]]; then
                echo "$CONTROL_DIR/skedf.ctl doesn't exist, can't run drudg, don't use '-d'" >&2
                exit 1
            fi
            run_drudg=1
            ;;
        D)
            FESH_DATA_CENTER=$OPTARG
            ;;
        f)
            force=1
            ;;
        y)
            year=$OPTARG
            ;;
        h)
            usage
            exit 0
            ;;
        v)
            verbose=1
            ;;
        V)
            version
            exit 0
            ;;
        *)
            echo "Try the '-h' option for help" >&2
            exit 1
    esac
done
shift $((OPTIND - 1))

if [[ $# -eq 0 ]] ; then
    usage >&2
    exit 1
fi

sched=$1

if [[ ! "$FESH_DATA_CENTER" =~ ^(cddis|opar|bkg)$ ]]; then
   echo "Unknown data center: $FESH_DATA_CENTER."
   exit 1
fi

if [[ ! "$FESH_CDDIS_METHOD" =~ ^(ftp|ftp-ssl|https)$ ]]; then
   echo "Unknown cddis method: $FESH_CDDIS_METHOD."
   exit 1
fi

## Conflict check
if [[ -e $SCHED_DIR/$sched.skd && -z "$force" ]]; then
    echo "$SCHED_DIR/$sched.skd exists, delete or use '-f' to get fresh schedule" >&2
    exit 1
fi

if [[ -n "$run_drudg" ]]; then
    set +u
    if [[ -z "$STATION" ]]; then
        >&2 echo "$0: ERROR: STATION enviroment variable not set; should be set to two-letter station code if using drudg."
        exit 1
    fi
    set -u
    if [[ -e $SNAP_DIR/$sched$STATION.snp ]]; then
        if [[ -z "$force" ]]; then
            echo "$SNAP_DIR/$sched$STATION.snp exists, delete or use '-f' to re-drudg" >&2
            exit 1
        fi
        rm "$SNAP_DIR/$sched$STATION.snp"
    fi
    if [[ -e $PROC_DIR/$sched$STATION.prc ]]; then
        if [[ -z "$force" ]]; then
            echo "$PROC_DIR/$sched$STATION.prc exists, delete or use '-f' to re-drudg" >&2
            exit 1
        fi
        rm "$PROC_DIR/$sched$STATION.prc"
    fi
    if [[ -e $LIST_DIR/$sched$STATION.lst ]]; then
        if [[ -z "$force" ]]; then
            echo "LIST_DIR/$sched$STATION.lst exists, delete or use '-f' to re-drudg" >&2
            exit 1
        fi
        rm "$LIST_DIR/$sched$STATION.lst"
    fi
fi
 
if [[ -z "${FESH_EMAIL:-}" ]]; then
    user=anonymous
else
    user="anonymous:$FESH_EMAIL"
fi
pushd "$SCHED_DIR" >/dev/null
version
echo Fetching schedule from server...
#TODO: if not found, maybe check next or previous years?
if [[ "$FESH_DATA_CENTER" =~ cddis ]]; then
    if [[ "$FESH_CDDIS_METHOD" =~ ^ftp$ ]]; then
        wget -nv --backups=1 "ftp://cddis.gsfc.nasa.gov/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
    elif [[ "$FESH_CDDIS_METHOD" =~ ^https$ ]]; then
        if [[ ! -e "$NETRC_DIR/.netrc" ]]; then
            fatal "$NETRC_DIR/.netrc not found, see usage"
        fi

        if ! grep -q urs.earthdata.nasa.gov "$NETRC_DIR/.netrc"; then
            fatal "$NETRC_DIR/.netrc does not contain CDDIS login information, see usage"
        fi
        curl  -k  -c ~/.urs_cookies -n \
            $CURL_NETRC_FILE_OPTION \
            -L -O "https://cddis.nasa.gov/archive/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
    else
        curl -u "$user" -O --ftp-ssl "ftp://gdc.cddis.eosdis.nasa.gov/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
    fi
elif [[ "$FESH_DATA_CENTER" =~ opar ]]; then
wget -nv --backups=1 "ftp://ivsopar.obspm.fr/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
elif [[ "$FESH_DATA_CENTER" =~ bkg ]]; then
wget -nv --backups=1 "ftp://ivs.bkg.bund.de/pub/vlbi/ivsdata/aux/$year/$sched/$sched.skd"
fi
echo Done
popd >/dev/null

drudg_out="/dev/null"
if [[ -n "$verbose" ]]; then
    drudg_out="/dev/stdout"
fi

if [[ -n "$run_drudg" ]]; then
echo -n Drudging schedule... >&2
cat <<EOF | "$FS_DIR/bin/drudg" "$sched.skd" > "$drudg_out"
$STATION
3
12
9
$LIST_DIR/$sched$STATION.lst



5
0

EOF

echo Done. >&2
fi
